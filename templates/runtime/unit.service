[Unit]
Description={{ service.get('description').title() }}
After=docker.service dnsdock.service hub.service

[Service]
Restart=on-failure
TimeoutStartSec=0
Environment="DNSDOCK_ENV={% if '-devel' in service.get('name') %}devel{% else %}prod{% endif %}"
Environment="DOCKER_IMAGE={{ service.get('docker_image') }}:{% if '-devel' in service.get('name') %}devel{% else %}latest{% endif %}"
Environment="DOCKER_NAME={{ service.get('name') }}"
Environment="DOCKER_PORT={{ service.get('port') }}"
Environment="DNSDOCK_PROXY={\\"https\\":{{service.get('port')}}{% if service.get('prom') != None %},\\"prom\\":{{ service.get('prom') }}{% endif %}}"
ExecStartPre=-/usr/bin/docker kill ${DOCKER_NAME}
ExecStartPre=-/usr/bin/docker rm ${DOCKER_NAME}
ExecStartPre=/usr/bin/docker pull ${DOCKER_IMAGE}
ExecStart=/usr/bin/docker run --rm --name ${DOCKER_NAME} --expose ${DOCKER_PORT} \
    -e DNSDOCK_PROXY=${DNSDOCK_PROXY} -e DNSDOCK_IMAGE=${DOCKER_NAME} -e DNSDOCK_ENV=${DNSDOCK_ENV} \
    -v {{ service.get('data_dir') }}/${DOCKER_NAME}:/data -v {{ service.get('config_dir') }}/conf/${DOCKER_NAME}:/conf \
    ${DOCKER_IMAGE}
ExecStop=/usr/bin/docker stop ${DOCKER_NAME}

[Install]
WantedBy=multi-user.target
